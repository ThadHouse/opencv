plugins {
    id "com.jfrog.bintray" version "1.6"
}

import org.gradle.internal.os.OperatingSystem

import java.nio.file.Files
import java.nio.file.Paths;

apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = 1.6
targetCompatibility = 1.6

def date = new Date()
def formattedDate = date.format('yyMMdd')
version = "3.1.0"

def rootPath = Paths.get(projectDir.canonicalPath)
def cmakeBuildDirectory = rootPath.resolve('build')
def jarName = "${project.name}-${version.replace(".", "").replace("-" + formattedDate, "")}.jar"
def pathToOpenCVJar = cmakeBuildDirectory.resolve("bin").resolve(jarName)

def osName = ""
def os_name = System.getProperty("os.name")
def os_arch = System.getProperty("os.arch")

if (os_arch == 'amd64') {
    os_arch = 'x86_64'
} else if (os_arch == 'i386') {
    os_arch = 'x86'
}

if(OperatingSystem.current().isWindows()){
    osName = "windows-${os_arch}"
} else if(OperatingSystem.current().isLinux()){
    osName = "linux-${os_arch}"
} else if(OperatingSystem.current().isMacOsX()){
    osName = "osx-${os_arch}"
} else {
    osName = "${os_name}-${os_arch}"
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven {
    url  "http://dl.bintray.com/ihmcrobotics/maven-release"
  }
}

task cmake(type: Exec) {
    if(!Files.exists(cmakeBuildDirectory))
    {
        Files.createDirectories(cmakeBuildDirectory)
    }

    workingDir cmakeBuildDirectory.toString()

    if(OperatingSystem.current().isWindows())
    {
        executable 'cmd'
        args = ['/c', 'cmake', '-DBUILD_SHARED_LIBS=OFF', '-DWITH_CUDA=OFF', '-DWITH_IPP=OFF', '-DWITH_OPENCL=OFF', '-DWITH_FFMPEG=OFF', '-DWITH_OPENEXR=OFF', '-G', '"Visual Studio 14 2015 Win64"', '..']
    }
    else
    {
        executable 'cmake'
        args = ['-DBUILD_SHARED_LIBS=OFF', '-DWITH_CUDA=OFF', '-DWITH_IPP=OFF', '-DWITH_OPENCL=OFF', '-DWITH_FFMPEG=OFF', '-DWITH_OPENEXR=OFF', '..']
    }
}

task make(type: Exec, dependsOn: cmake) {
    workingDir cmakeBuildDirectory.toString()
    def processors = Runtime.runtime.availableProcessors()

    if(OperatingSystem.current().isWindows())
    {
        executable 'cmd'
        args = ['/c', 'msbuild', '/m', 'OpenCV.sln', '/t:Build', '/p:Configuration=Release', '/v:m']
    }
    else
    {
        executable 'make'
        args = ["-j${processors}"]
    }

    outputs.file pathToOpenCVJar.toFile()
    outputs.file cmakeBuildDirectory.resolve("src").toFile()
}

task openCVJniJar(type: Jar, dependsOn: make) {
    baseName = "${project.name}-jni"
    classifier = "${osName}"

    manifest {
        attributes(
                "Created-By": "WPILib Gradle Build Script",
                "Implementation-Title": "OpenCV JNI Library, ${osName}",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": "${baseName}",
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "WPILib")
    }

    if(!OperatingSystem.current().isWindows()){
      from(cmakeBuildDirectory.resolve("lib").toFile()) {
          include '*java*.so'
          include '*java*.dylib'
          into 'org/opencv'
      }
    }
    else {
      from(cmakeBuildDirectory.resolve("bin").resolve("Release").toFile()) {
          include '*java*.dll'
          into 'org/opencv'
      }
    }
}

task openCVNativeLibJar(type: Jar, dependsOn: make) {
    baseName = "${project.name}-natives"
    classifier = "${osName}"
    manifest {
        attributes(
                "Created-By": "WPILib Gradle Build Script",
                "Implementation-Title": "OpenCV Native Libraries, ${osName}",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": "${baseName}",
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "WPILib")
    }

    if(!OperatingSystem.current().isWindows()){
      from(cmakeBuildDirectory.resolve("lib").toFile()) {
          exclude '*java*.so'
          exclude '*java*.dylib'
          into 'org/opencv'
      }
    }
    else {
      from(cmakeBuildDirectory.resolve("bin").resolve("Release").toFile()) {
          exclude '*java*.dll'
          into 'org/opencv'
      }
    }
}

task openCVJar(type: Jar, dependsOn: make) {
    baseName = "${project.name}-java"
    manifest {
        attributes(
                "Created-By": "WPILib Gradle Build Script",
                "Implementation-Title": "OpenCV",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": project.name,
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "WPILib")
    }

    from { zipTree(pathToOpenCVJar.toFile()) } {
        exclude "META-INF/*"
        exclude "META-INF"
    }
}

task openCVSourceJar(type: Jar, dependsOn: make) {
    baseName = "${project.name}-sources"
    manifest {
        attributes(
                "Created-By": "WPILib Gradle Build Script",
                "Implementation-Title": "OpenCV Java Sources",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": "${project.name}-sources",
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "WPILib")
    }

    from(cmakeBuildDirectory.resolve("src").toFile()) {
        include '**/*.java'
    }
}

task openCVHeadersJar(type: Jar, dependsOn: make) {
    baseName = "${project.name}-headers"
    manifest {
        attributes(
                "Created-By": "WPILib Gradle Build Script",
                "Implementation-Title": "OpenCV C++ Headers",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": "${project.name}-headers",
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "WPILib")
    }
    from(rootPath.resolve('modules').toFile()) {
        include '*/include/**/*.hpp'
        include '*/include/**/*.h'
        exclude 'java/**'
        exclude 'python/**'
    }
}

task allArtifacts(type: GradleBuild) {
    tasks = ['openCVJar', 'openCVSourceJar', 'openCVJniJar', 'openCVNativeLibJar', 'openCVHeadersJar']
}

publishing {
    println configurations.runtime.allDependencies
    publications {
        mavenOpenCV(MavenPublication) {
            groupId 'us.ihmc.thirdparty.org.opencv'

            artifact openCVJar

            artifact openCVSourceJar

            pom.withXml {
                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'BSD 3-Clause License')
                licenseNode.appendNode('url', 'https://opensource.org/licenses/BSD-3-Clause')
            }
        }

        mavenOpenCVJniJar(MavenPublication) {
            groupId 'us.ihmc.thirdparty.org.opencv'
            artifactId "${project.name}-jni"
            artifact openCVJniJar

            pom.withXml {
                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'BSD 3-Clause License')
                licenseNode.appendNode('url', 'https://opensource.org/licenses/BSD-3-Clause')
            }
        }
    }
}

bintray {
    user = project.hasProperty("bintray_user") ? project.bintray_user : "invalid"
    key = project.hasProperty("bintray_key") ? project.bintray_key : "invalid"

    if (user.equals("invalid")) {
        project.logger.debug("Bintray user name property not set. Please set the 'bintray_user' property in ~/.gradle/gradle.properties. See https://github.com/bintray/gradle-bintray-plugin")
    }

    if (key.equals("invalid")) {
        project.logger.debug("Bintray API key property not set. Please set the 'bintray_key' property in ~/.gradle/gradle.properties. See https://github.com/bintray/gradle-bintray-plugin")
    }

    dryRun = false
    publish = false

    if(project.bintrayPublishType.equals("WRAPPER"))
    {
        publications = ["mavenOpenCV"]
    }
    else if(project.bintrayPublishType.equals("PLATFORM"))
    {
        publications = ["mavenOpenCVJniJar"]
    }
    else
    {
        throw new GradleException("Invalid Bintray publication type: ${project.bintrayPublishType}, must be WRAPPER for the Java upload or PLATFORM for the native library upload")
    }

    pkg {
        repo = "maven-vendor"
        userOrg = "ihmcrobotics"
        name = "OpenCVJavaBindings"
        desc = "Maven repository providing the stock OpenCV Java bindings, vendored by IHMC Robotics"

        websiteUrl = "http://opencv.org"
        issueTrackerUrl = "https://github.com/itseez/opencv/issues"
        vcsUrl = "https://github.com/itseez/opencv.git"

        licenses = ['BSD 3-Clause']
        labels = ['java', 'vision', 'opencv', 'jni', 'vendored']

        version {
            name = project.version
            released = new Date()
        }
    }
}
