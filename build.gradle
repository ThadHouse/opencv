import org.gradle.internal.os.OperatingSystem

import java.nio.file.Files
import java.nio.file.Paths;

apply plugin: 'java'

def date = new Date()
def formattedDate = date.format('yyMMdd')
version = "3.1.0"

ext {
    defaultCmakeArgs = [
            '-DBUILD_SHARED_LIBS=OFF',
            '-DWITH_CUDA=OFF',
            '-DWITH_IPP=OFF',
            '-DWITH_OPENCL=OFF',
            '-DWITH_FFMPEG=OFF',
            '-DWITH_OPENEXR=OFF',
            '-DBUILD_TESTS=OFF',
            '-DWITH_WEBP=OFF'
    ]
}

def rootPath = Paths.get(projectDir.canonicalPath)
def cmakeBuildDirectory = rootPath.resolve('build')
def jarName = "${project.name}-${version.replace(".", "").replace("-" + formattedDate, "")}.jar"
def pathToOpenCVJar = cmakeBuildDirectory.resolve("bin").resolve(jarName)

def getPlatform() {
    def platform
    def os_name = System.getProperty("os.name")
    def os_arch = System.getProperty("os.arch")

    if (os_arch == 'amd64') {
        os_arch = 'x86_64'
    } else if (os_arch == 'i386') {
        os_arch = 'x86'
    }

    if (OperatingSystem.current().isWindows()) {
        platform = "windows-${os_arch}"
    } else if (OperatingSystem.current().isLinux()) {
        platform = "linux-${os_arch}"
    } else if (OperatingSystem.current().isMacOsX()) {
        platform = "osx-${os_arch}"
    } else {
        platform = "${os_name}-${os_arch}"
    }
    return platform
}

// Determine what repo to publish to. Default is development. Valid options are development, beta, stable, and release
if (!hasProperty('repo')) {
    allprojects {
        ext.repo = 'development'
    }
}

if (!hasProperty('platform')) {
    println "No 'platform' property specified; using the build system's platform"
    ext {
        platform = getPlatform()
    }
}

println "Building for platform ${project.platform}"

repositories {
    mavenLocal()
    mavenCentral()
}

task cmake(type: Exec) {
    if (!Files.exists(cmakeBuildDirectory)) {
        Files.createDirectories(cmakeBuildDirectory)
    }

    def cmakeArgs = {
        def toolchain = project.properties.getOrDefault('toolchain', null)
        if (toolchain) {
            println "Using toolchain '${toolchain}'"
            return defaultCmakeArgs + "-DCMAKE_TOOLCHAIN_FILE=${toolchain}"
        } else {
            println "No toolchain specified"
            return defaultCmakeArgs
        }
    }

    workingDir cmakeBuildDirectory.toString()

    if (OperatingSystem.current().isWindows()) {
        executable 'cmd'
        args = ['/c', 'cmake'] + cmakeArgs() + ['-G', '"Visual Studio 12 2013 Win64"', '..']
    } else {
        executable 'cmake'
        args = cmakeArgs() + '..'
    }
}

task make(type: Exec, dependsOn: cmake) {
    workingDir cmakeBuildDirectory.toString()
    def processors = Runtime.runtime.availableProcessors()

    if (OperatingSystem.current().isWindows()) {
        executable 'cmd'
        args = ['/c', 'msbuild', '/m', 'OpenCV.sln', '/t:Build', '/p:Configuration=Release', '/v:m']
    } else {
        executable 'make'
        args = ["-j${processors}"]
    }

    outputs.file pathToOpenCVJar.toFile()
    outputs.file cmakeBuildDirectory.resolve("src").toFile()
}

task openCVJniJar(type: Jar, dependsOn: make) {
    baseName = "${project.name}-jni"
    classifier = "${project.platform}"

    manifest {
        attributes(
                "Created-By": "WPILib Gradle Build Script",
                "Implementation-Title": "OpenCV JNI Library, ${project.platform}",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": "${baseName}",
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "WPILib")
    }

    if (!OperatingSystem.current().isWindows()) {
        from(cmakeBuildDirectory.resolve("lib").toFile()) {
            include '*java*.so'
            include '*java*.dylib'
        }
    } else {
        from(cmakeBuildDirectory.resolve("bin").resolve("Release").toFile()) {
            include '*java*.dll'
        }
    }
}

task openCVNativeLibJar(type: Jar, dependsOn: make) {
    baseName = "${project.name}-natives"
    classifier = "${project.platform}"
    manifest {
        attributes(
                "Created-By": "WPILib Gradle Build Script",
                "Implementation-Title": "OpenCV Native Libraries, ${project.platform}",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": "${baseName}",
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "WPILib")
    }

    if (!OperatingSystem.current().isWindows()) {
        from(cmakeBuildDirectory.resolve("lib").toFile()) {
            exclude '*java*.so'
            exclude '*java*.dylib'
            exclude '**/*dephelp*'
        }
    } else {
        from(cmakeBuildDirectory.resolve("lib").resolve("Release").toFile()) {
            include '*.lib' // static lib
            include '*.dll' // dynamic lib
            exclude '*java*'
        }
    }
}

task openCVJar(type: Jar, dependsOn: make) {
    baseName = "${project.name}-java"
    manifest {
        attributes(
                "Created-By": "WPILib Gradle Build Script",
                "Implementation-Title": "OpenCV",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": project.name,
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "WPILib")
    }

    from { zipTree(pathToOpenCVJar.toFile()) } {
        exclude "META-INF/*"
        exclude "META-INF"
    }
}

task openCVSourceJar(type: Jar, dependsOn: make) {
    baseName = "${project.name}-sources"
    manifest {
        attributes(
                "Created-By": "WPILib Gradle Build Script",
                "Implementation-Title": "OpenCV Java Sources",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": "${project.name}-sources",
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "WPILib")
    }

    from(cmakeBuildDirectory.resolve("src").toFile()) {
        include '**/*.java'
    }
}

task openCVHeadersJar(type: Jar, dependsOn: make) {
    baseName = "${project.name}-headers"
    manifest {
        attributes(
                "Created-By": "WPILib Gradle Build Script",
                "Implementation-Title": "OpenCV C++ Headers",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": "${project.name}-headers",
                "Bundle-Version": project.version,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "WPILib")
    }
    from(rootPath.resolve('modules').toFile()) {
        include '*/include/**/*.hpp'
        include '*/include/**/*.h'
        exclude 'java/**'
        exclude 'python/**'
    }
}

task allArtifacts(type: GradleBuild) {
    tasks = ['openCVJar', 'openCVSourceJar', 'openCVJniJar', 'openCVNativeLibJar', 'openCVHeadersJar']
}

apply plugin: 'maven-publish'
publishing {
    publications {
        java(MavenPublication) {
            groupId 'org.opencv'
            artifactId "${project.name}-java"
            artifact openCVJar
            artifact openCVSourceJar {
                classifier 'sources'
            }

            pom.withXml {
                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'BSD 3-Clause License')
                licenseNode.appendNode('url', 'https://opensource.org/licenses/BSD-3-Clause')
            }
        }
        jni(MavenPublication) {
            groupId 'org.opencv'
            artifactId "${project.name}-jni"
            artifact openCVJniJar

            pom.withXml {
                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'BSD 3-Clause License')
                licenseNode.appendNode('url', 'https://opensource.org/licenses/BSD-3-Clause')
            }
        }
        headers(MavenPublication) {
            groupId 'org.opencv'
            artifactId "${project.name}-headers"
            artifact openCVHeadersJar

            pom.withXml {
                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'BSD 3-Clause License')
                licenseNode.appendNode('url', 'https://opensource.org/licenses/BSD-3-Clause')
            }
        }
        natives(MavenPublication) {
            groupId 'org.opencv'
            artifactId "${project.name}-natives"
            artifact openCVNativeLibJar

            pom.withXml {
                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'BSD 3-Clause License')
                licenseNode.appendNode('url', 'https://opensource.org/licenses/BSD-3-Clause')
            }
        }
    }
    repositories {
        maven {
            url "${System.getProperty('user.home')}/releases/maven/${project.repo}"
        }
    }
}
